apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
  labels:
    app: techtrends
  name: techtrends
  namespace: {{ .Values.namespace.name }}
spec:
  ## Set the number of replicas.
  ## This will create a ReplicaSet that will manage 3 pods of the Go hello-world application.
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: techtrends

  template:
    ## Define the identifiable metadata for the pods.
    ## For example, all pods should have the label `techtrends`
    metadata:
      labels:
        app: techtrends
    spec:
      containers:
        - image: {{ .Values.image.repository }}/techtrends:{{ .Values.image.tag }}
          #maur1/techtrends:latest
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: techtrends
          ## Expose the port the container is listening on.
          ## For example, exposing the application port 3111 via TCP.
          ports:
            - containerPort: {{ .Values.containerPort}}
              protocol: {{ .Values.service.protocol }}
          ## Define the rules for the liveness probes.
          ## For example, verify the application on the main route `/`,
          ## on application port 3111. If the application is not responsive, then the pod will be restarted automatically.
          livenessProbe:
             httpGet:
               path: {{ .Values.livenessProbe.path }}
               port: {{ .Values.containerPort}}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessProbe.path }}
              port: {{ .Values.containerPort}}
          ## Define the rules for the readiness probes.
          ## For example, verify the application on the main route `/`,
          ## on application port 6112. If the application is responsive, then traffic will be sent to this pod.
          ## Set the resource requests and limits for an application.
          resources:
            ## The resource requests guarantees that the desired amount
            ## CPU and memory is allocated for a pod. In this example,
            ## the pod will be allocated with 64 Mebibytes and 250 miliCPUs.
            requests:
              memory: {{ .Values.resources.requests.memory }}
              cpu: {{ .Values.resources.requests.cpu }}
            ## The resource limits ensure that the application is not consuming
            ## more than the specified CPU and memory values. In this example,
            ## the pod will not surpass 128 Mebibytes and 500 miliCPUs.
            limits:
              memory: {{ .Values.resources.limits.memory }}
              cpu: {{ .Values.resources.limits.cpu }}